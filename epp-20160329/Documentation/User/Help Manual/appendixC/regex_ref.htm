<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Appendix C/Regular Expression Reference</title>
<link rel="stylesheet" type="text/css" href="../explorer++.css">
</head>

<body>

<h2><a name="top"></a>Appendix C/Regular Expression Reference</h2>
<p>The Regular Expression elements below are a subset of
<a class="EXTlnk" title="MSDN page" target="_blank" href="http://msdn.microsoft.com/en-us/library/bb982727.aspx">
TR1 Regular Expressions</a>, used by the <a href="../mnu_tools/search.htm">
Search</a> tool to match regular expressions to file/folder names.&nbsp; Some 
elements of the regular expression parser are not functional in that context 
(e.g. elements for detecting words boundaries, line ends, etc., elements for 
text replacement) and are for that reason, not included.&nbsp; Also, a few 
functional elements have no useful value here and have been omitted from the 
reference.&nbsp; The user of regular expressions is encouraged to experiment and 
discover any additional functionality embedded with the Search tool.</p>
<p>Some of the examples may not be ideally constructed - they are there just to 
demonstrate individual elements.&nbsp; Keep in mind that there is often more 
than one way to construct a regular expression which does a certain task.</p>
<p>&nbsp;</p>
<h3><a name="metachars"></a>Meta-characters</h3>
<p>Meta-characters generally consist of the following characters:
<font face="Courier New" size="3">ˆ $ . * \ [ ] { } ( ) + ? |<br>
</font>Some meta-characters have more than one meaning, depending on their 
context (e.g. <font face="Courier New">^</font> as a <a href="#negation">
negation</a> symbol when used inside <font face="Courier New">[]</font>, or as 
an <a href="#anchor_start">anchor</a> when used outside <font face="Courier New">
[]</font>).&nbsp; Using the <a href="#escape">escape</a> character (<font face="Courier New">\</font>) 
immediately before a meta-character matches the character itself as a literal 
(no special meaning), for example<font face="Courier New"> \^</font> matches the 
actual &quot;<font face="Courier New">^</font>&quot; symbol when it occurs in the target 
(i.e. file/folder name) string.</p>
<p>&nbsp;</p>
<h3><a name="elements"></a>Elements</h3>
<p>The following table contains meta-characters and elements useful in the <b>
Search</b> tool as part of regular expressions; there may also be additional 
useful information in the <a href="../mnu_tools/regex_primer.htm">Regular 
Expressions Primer</a>.&nbsp; Note that the case (i.e. upper/lower case) is 
important in some expressions (e.g. <font face="Courier New">\s</font>,
<font face="Courier New">\S</font>).</p>
<table border="1" cellpadding="2" cellspacing="1">
  <tr>
    <td width="130" class="tabletitle"><a name="dot"></a>EXPRESSION</td>
    <td width="85" class="tabletitle" align="center">SYNTAX</td>
    <td width="117" class="tabletitle">ORDINARY NAME</td>
    <td class="tabletitle">DESCRIPTION</td>
    <td width="280" class="tabletitle">EXAMPLES</td>
  </tr>
  <tr>
    <td width="130">Any character</td>
    <td width="85" align="center"><font face="Courier New">.</font></td>
    <td width="117">dot or period</td>
    <td>matches any single character (except a newline - not used in file/folder 
    names)</td>
    <td width="280"><font face="Courier New">s.s</font> matches <b>sys</b> (<b>sys</b>tem) 
    and <b>ses</b> (<b>ses</b>sion)<br>
    but not <b>sores</b> </td>
  </tr>
  <tr>
    <td width="130">Zero or more<br>
    (<i>quantifier</i>)</td>
    <td width="85" align="center"><font face="Courier New">*</font></td>
    <td width="117">asterisk</td>
    <td>matches zero or more occurrences of the preceding expression, and makes 
    all possible matches</td>
    <td width="280"><font face="Courier New"><span class="input">a*b</span></font> 
    matches <b>b</b> (bat) and <b>ab</b> (about)<br>
    <font face="Courier New">.*</font> matches any sequence of characters</td>
  </tr>
  <tr>
    <td width="130">Zero or one<br>
    (<i>quantifier</i>)</td>
    <td width="85" align="center"><font face="Courier New">?</font></td>
    <td width="117">question mark</td>
    <td>matches zero or one occurrence of the preceding expression,&nbsp; same 
    as <font face="Courier New">{0,1}</font> (see Repetition below)</td>
    <td width="280">&nbsp;</td>
  </tr>
  <tr>
    <td width="130">One or more<br>
    (<i>quantifier</i>)</td>
    <td width="85" align="center"><font face="Courier New">+</font></td>
    <td width="117">plus</td>
    <td>matches at least one occurrence of the preceding expression, same as
    <font face="Courier New">{1,}</font> (see Repetition below)</td>
    <td width="280"><font face="Courier New">rol+</font> matches <b>rol</b> and
    <b>rolllll<br>
    </b>but not <b>ro</b></td>
  </tr>
  <tr>
    <td width="130">Repetition<br>
    (<i>quantifier</i>)</td>
    <td width="85" align="center"><font face="Courier New">{n}<br>
    {min,max}</font></td>
    <td width="117">braces</td>
    <td>In the first form, <font face="Courier New">{n}</font> matches <b>
    <font face="Courier New">n</font></b> or more occurrences (<font face="Courier New">n</font> 
    is inside the braces) of the preceding expression.&nbsp; In the second form,
    <font face="Courier New">{min,max}</font> matches at least <b>
    <font face="Courier New">min</font></b> occurrences of the preceding 
    expression, but not more than <b><font face="Courier New">max</font></b> 
    occurrences.&nbsp; If <font face="Courier New">max</font> is omitted (e.g.
    <font face="Courier New">{min,}</font>) then the expression can match min or 
    more occurrences (no upper limit).</td>
    <td width="280"><font face="Courier New">rol{2}</font> matches <b>roll</b> 
    and <b>rolllll</b> but not <b>rol<br>
    </b><font face="Courier New">z{2,3}</font> matches <b>zz</b> and <b>zzz</b> 
    but not <b>zzzz<br>
    </b><font face="Courier New">z{2,}</font> matches <b>zz</b> and <b>zzz</b>,
    <b>zzzz</b>, etc.</td>
  </tr>
  <tr>
    <td width="130"><a name="set"></a>Any one character in the set</td>
    <td width="85" align="center"><font face="Courier New">[]</font></td>
    <td width="117">(square) brackets</td>
    <td>matches any one of the characters in the <font face="Courier New">[]</font>. 
    To specify a range of characters, list the starting and ending characters 
    separated by a dash (-), as in <font face="Courier New">[a-z]</font>.&nbsp; 
    Also see <a href="#char_class">Character Classes</a> below.</td>
    <td width="280"><font face="Courier New">be[srn]t</font> matches <b>best</b>,
    <b>bert</b> or <b>bent</b></td>
  </tr>
  <tr>
    <td width="130"><a name="negation"></a>Any one character not in the set</td>
    <td width="85" align="center"><font face="Courier New">[^...]</font></td>
    <td width="117">circumflex accent,<br>
    exponent symbol</td>
    <td>matches any character that is not in the set of characters that follows 
    the <font face="Courier New">^</font>.&nbsp; Not that this symbol (<font face="Courier New">^</font>) 
    has <a href="#anchor_start">alternate meaning</a> when used outside the 
    square brackets.</td>
    <td width="280"><font face="Courier New">be[^r]t</font> matches <b>best</b> 
    or <b>bent<br>
    </b>but not bert</td>
  </tr>
  <tr>
    <td width="130">Or</td>
    <td width="85" align="center">|</td>
    <td width="117"><i>pipe</i>, vertical line</td>
    <td>matches either the expression before or the one after the OR symbol (<font face="Courier New">|</font>). 
    Mostly used in a group.</td>
    <td width="280"><font face="Courier New">AL|TE</font> matches <b>ALE</b> or
    <b>ATE</b></td>
  </tr>
  <tr>
    <td width="130">Group</td>
    <td width="85" align="center"><font face="Courier New">()</font></td>
    <td width="117">parentheses</td>
    <td>isolates an Or expression, also used by capture techniques</td>
    <td width="280"><font face="Courier New">a(jpg|jpeg)</font> matches <b>ajpg</b> 
    or <b>ajpeg</b></td>
  </tr>
  <tr>
    <td width="130"><a name="escape"></a>Escape</td>
    <td width="85" align="center"><font face="Courier New">\</font></td>
    <td width="117">backslash</td>
    <td>when it precedes a meta-character, the combination is taken as a 
    literal.&nbsp; Some meta-characters<font face="Courier New" size="3">,</font> 
    namely <font face="Courier New" size="3">ˆ$.[]{}()+</font>, may be used in 
    file/folder names.&nbsp; To match the actual &quot;\&quot; character, escape it as you 
    would any other character (e.g. <font face="Courier New">\\</font>).&nbsp; 
    This symbol, however, is forbidden for use in a Windows file or folder name 
    (used in path construction).</td>
    <td width="280"><font face="Courier New">a\.txt</font> matches <b>a.txt</b></td>
  </tr>
  <tr>
    <td width="130">Any one whitespace character</td>
    <td width="85" align="center"><font face="Courier New">\s</font></td>
    <td width="117">backslash s</td>
    <td>matches a single whitespace character (<b>space</b>, tab, newline).&nbsp; 
    Note: tab and newline cannot used in file/folder names.&nbsp; <b>
    <font face="Courier New">s</font></b> is actually a class (<font face="Courier New">[:space:]</font> 
    or <font face="Courier New">[:s:]</font>), but is not listed under classes; 
    use this syntax instead.</td>
    <td width="280"><font face="Courier New">hi\sbob</font> matches <b>hi bob<br>
    </b>but not <b>hi-bob</b></td>
  </tr>
  <tr>
    <td width="130">Any one non-whitespace character</td>
    <td width="85" align="center"><font face="Courier New">\S</font></td>
    <td width="117">backslash S</td>
    <td>matches a single non-whitespace character.</td>
    <td width="280"><font face="Courier New">hi\Sbob</font> matches <b>hi-bob<br>
    </b>but not <b>hi bob</b></td>
  </tr>
  <tr>
    <td width="130">Any one digit</td>
    <td width="85" align="center"><font face="Courier New">\d</font></td>
    <td width="117">backslash d</td>
    <td>matches a single numeric character.&nbsp; This is the same as using
    <font face="Courier New">[0-9]</font>.&nbsp; See <a href="#char_class">
    classes</a> below.</td>
    <td width="280"><font face="Courier New">file\d</font> matches <b>file2</b> 
    and <b>file9<br>
    </b>but not <b>files</b></td>
  </tr>
  <tr>
    <td width="130">Any one non-digit</td>
    <td width="85" align="center"><font face="Courier New">\D</font></td>
    <td width="117">backslash D</td>
    <td>matches a single non-numeric character.&nbsp; This is the same as using
    <font face="Courier New">[^0-9]</font>.</td>
    <td width="280"><font face="Courier New">file\D</font> matches <b>files</b> 
    and <b>filed<br>
    </b>but not <b>file1</b></td>
  </tr>
  <tr>
    <td width="130">Any alphanumeric<br>
    (<i>word</i> character)</td>
    <td width="85" align="center"><font face="Courier New">\w</font></td>
    <td width="117">backslash w</td>
    <td>matches a single alphanumeric character (a-z, A-Z, 0-9).&nbsp; See
    <a href="#char_class">classes</a> below.</td>
    <td width="280"><font face="Courier New">1234\w</font><font face="Arial"> 
    matches <b>12345</b> and <b>1234a</b><br>
    but not <b>1234!</b></font></td>
  </tr>
  <tr>
    <td width="130">Any non-alphanumeric<br>
    (non-<i>word</i> character)</td>
    <td width="85" align="center"><font face="Courier New">\W</font></td>
    <td width="117">backslash W</td>
    <td>matches a single non-alphanumeric character</td>
    <td width="280"><font face="Courier New">1234\W</font><font face="Arial"> 
    matches <b>1234!</b><br>
    but not <b>12345</b> or <b>1234a</b></font></td>
  </tr>
  <tr>
    <td width="130">One Unicode character</td>
    <td width="85" align="center"><font face="Courier New">\u####</font></td>
    <td width="117">backslash u, 4 hex digits</td>
    <td>matches a single Unicode character.&nbsp; #### represents 4 hexadecimal 
    digits - the character code; hex digits in the A-F range may be upper or 
    lower case.</td>
    <td width="280"><font face="Courier New">flamb\u00E9</font><font face="Arial"> 
    matches <b>flambé</b><br>
    but not <b>flambe</b></font></td>
  </tr>
</table>
<p>&nbsp;</p>
<h3><a name="anchors"></a>Anchors</h3>
<p>Anchors are elements which match specific locations in the target string.&nbsp; 
Knowing that the search pattern has arrived at one of these locations might be 
useful in narrowing down the search by incorporating that location into the 
regular expression.&nbsp; Anchors have zero width, that is, they do not advance 
the text <i>pointer</i> in the target string.</p>
<table border="1" cellpadding="2" cellspacing="1">
  <tr>
    <td width="130" class="tabletitle">EXPRESSION</td>
    <td width="85" class="tabletitle" align="center">SYNTAX</td>
    <td width="117" class="tabletitle">ORDINARY NAME</td>
    <td class="tabletitle">DESCRIPTION</td>
    <td width="280" class="tabletitle">EXAMPLES</td>
  </tr>
  <tr>
    <td width="130">Word boundary</td>
    <td width="85" align="center"><font face="Courier New">\b</font></td>
    <td width="117">backslash b</td>
    <td>
    <p style="margin-bottom: -16">matches when the current position in the 
    target string is immediately after a <i><span class="parameter">word 
    boundary</span></i>.&nbsp; In other words, at this point, there is a <i>word</i> 
    (alphanumeric) character on one side of the <i>pointer</i>, but not on the 
    other.&nbsp; This might be</p>
    <ul>
      <li>at the start of the file name</li>
      <li>at a space in the file name</li>
      <li>at a &quot;<font face="Courier New">.</font>&quot; character anywhere in the 
      name, or at the start of the file extension</li>
    </ul>
    <p style="margin-top: -16">The &quot;<font face="Courier New">\b</font>&quot; element 
    matches either a start or end of a word.</td>
    <td width="280"><font face="Courier New">.*\bhp.*</font> matches &quot;<b>abc 
    hp.txt</b>&quot;, &quot;<b>hp abc.txt</b>&quot;, &quot;<b>hp.txt</b>&quot; and &quot;<b>hpabc.txt</b>&quot;<br>
    but not &quot;<b>abchp.txt</b>&quot;</td>
  </tr>
  <tr>
    <td width="130">Non-word boundary</td>
    <td width="85" align="center"><font face="Courier New">\B</font></td>
    <td width="117">backslash \B</td>
    <td>matches when the current position in the target string is <b>not</b> a 
    word boundary (see \b above)</td>
    <td width="280"><font face="Courier New">.*\Bhp.*</font> matches &quot;<b>abchp.txt</b>&quot;<br>
    but not all the others matched in \b above</td>
  </tr>
  <tr>
    <td width="130"><a name="anchor_start"></a>String start</td>
    <td width="85" align="center"><font face="Courier New">^</font></td>
    <td width="117">circumflex accent,<br>
    exponent symbol</td>
    <td>matches when the current position is the start of the string</td>
    <td width="280"><font face="Courier New">.*^ex.*</font> matches <b>
    explorer.htm</b><br>
    but not <b>index.htm</b></td>
  </tr>
  <tr>
    <td width="130">String end</td>
    <td width="85" align="center"><font face="Courier New">$</font></td>
    <td width="117">dollar sign</td>
    <td>matches when the current position is the end of the string</td>
    <td width="280"><font face="Courier New">.*hp$.*</font> matches <b>abchp</b> 
    and <b>hp</b><br>
    but not <b>hpabc</b></td>
  </tr>
</table>
<p>&nbsp;</p>
<h3><a name="char_class"></a>Character Classes</h3>
<p>Character classes are a <i>shorthand</i> way of representing a range of 
characters and may be used directly in the construction of character
<a href="#set">sets</a> (or negation sets, e.g. <font face="Courier New">[^...]</font>) 
in regular expressions.&nbsp; Each class below is shown in usable form - they 
require delimiting &quot;:&quot; characters, and must be enclosed in brackets. They may 
then be used in character sets - as if they were a single character - which 
requires double sets of brackets (see examples below).&nbsp; Using classes may 
reduce the size of your expression, but the same functionality can be added in 
other ways.&nbsp; Note: that classes are locale dependent and <i>may</i> <b>
include</b> foreign language characters which are in common locale usage, e.g.
<b><font face="Arial">é</font></b>; to exclude those characters, use a 
constructed character set instead, such as <font face="Courier New">[a-zA-Z]</font>.&nbsp; 
A few select classes have short names, e.g. see <b>digits</b> and <b>
alphanumeric</b> below, and <font face="Courier New"><b>\s</b></font> in 
expressions above.</p>
<table border="1" cellpadding="2" cellspacing="1">
  <tr>
    <td width="129" class="tabletitle">CLASS</td>
    <td width="85" class="tabletitle" align="center">SYNTAX</td>
    <td class="tabletitle">DESCRIPTION</td>
    <td width="280" class="tabletitle">EXAMPLES</td>
  </tr>
  <tr>
    <td width="129">uppercase</td>
    <td width="85" align="center"><font face="Courier New">[:upper:]</font></td>
    <td>upper case characters</td>
    <td width="280"><font face="Courier New">[[:upper:]]*</font> matches <b>FILE</b><br>
    but not <b>File</b></td>
  </tr>
  <tr>
    <td width="129">lowercase</td>
    <td width="85" align="center"><font face="Courier New">[:lower:]</font></td>
    <td>lower case characters</td>
    <td width="280"><font face="Courier New">[[:lower:]]*</font> matches <b>file</b><br>
    but not <b>File</b></td>
  </tr>
  <tr>
    <td width="129">alphabetic</td>
    <td width="85" align="center"><font face="Courier New">[:alpha:]</font></td>
    <td>all upper/lower case letters</td>
    <td width="280"><font face="Courier New">[[:alpha:]]*</font> matches <b>abgh</b><br>
    but not <b>doc1</b></td>
  </tr>
  <tr>
    <td width="129">digits</td>
    <td width="85" align="center"><font face="Courier New">[:digit:]<br>
    [:d:]</font></td>
    <td>ordinary digits 0-9, alternate syntax is <font face="Courier New">[:d:]</font></td>
    <td width="280"><font face="Courier New">[[:digit:]]*</font> matches <b>
    134679</b><br>
    but not <b>134679a</b></td>
  </tr>
  <tr>
    <td width="129">hexadecimal digits</td>
    <td width="85" align="center"><font face="Courier New">[:xdigit:]</font></td>
    <td>all hex digits, i.e. a-f, A-F, 0-9</td>
    <td width="280"><font face="Courier New">[[:xdigit:]]*</font> matches <b>
    1a2b9F</b><br>
    but not <b>1g4b</b></td>
  </tr>
  <tr>
    <td width="129">alphanumeric</td>
    <td width="85" align="center"><font face="Courier New">[:alnum:]<br>
    [:w:]</font></td>
    <td>all upper/lower case letters, digits 0-9, alternate syntax is
    <font face="Courier New">[:w:]</font></td>
    <td width="280"><font face="Courier New">[[:alnum:]]*</font> matches <b>12ex</b> 
    and <font face="Arial"><b>flambé</b><br>
    but not <b>87_a</b> or <b>12ex.txt</b></font></td>
  </tr>
  <tr>
    <td width="129">punctuation</td>
    <td width="85" align="center"><font face="Courier New">[:punct:]</font></td>
    <td>punctuation</td>
    <td width="280"><font face="Courier New">[[:punct:]]*</font> matches <b>
    _!~.@@</b><br>
    but not <b>_!~.@@.txt</b></td>
  </tr>
  <tr>
    <td width="129">&nbsp;</td>
    <td width="85" align="center"><font face="Courier New">[:graph:]</font></td>
    <td>upper/lower case letters, digits, and punctuation</td>
    <td width="280"><font face="Courier New">[[:graph:]]*</font> matches <b>
    textdoc.txt</b><br>
    but not <b>text doc.txt</b></td>
  </tr>
  <tr>
    <td width="129">&nbsp;</td>
    <td width="85" align="center"><font face="Courier New">[:print:]</font></td>
    <td>upper/lower case letters, digits, punctuation and space</td>
    <td width="280">same as <font face="Courier New"><a href="#dot">.</a></font> 
    - matches every character</td>
  </tr>
</table>
<p>&nbsp;</p>
<h3><a name="capture"></a>Capture Groups</h3>
<p>If an element matches a portion of the target string, the characters that it 
matched (in the target string) may be <i>captured</i> and re-used in the same 
regular expression.&nbsp; <i>Capture</i> is accomplished by</p>
<ul>
  <li>forming the capturing element inside parentheses, e.g.
  <font face="Courier New">(.)</font> captures a single character then</li>
  <li>using escape (<font face="Courier New">\</font>) followed by an integer to 
  represent the captured text.&nbsp; Integers start at 1 (left-most or first 
  capture) and increase as captures are done (left to right).</li>
</ul>
<p>For example, the regular expression<font face="Courier New"><br>
&nbsp;&nbsp;&nbsp; ab(.{2})(.{2})(.{2})\1\2\3<br>
</font>may be broken down as follows:</p>
<blockquote>
  <table border="0" cellpadding="2" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111">
    <tr>
      <td width="56"><font face="Courier New">ab</font></td>
      <td width="108">literal</td>
      <td>matches &quot;ab&quot; as the first 2 characters in the target string</td>
    </tr>
    <tr>
      <td width="56"><font face="Courier New">(.{2})</font></td>
      <td width="108">wildcard x 2</td>
      <td>matches and captures the next 2 characters, i.e. 3-4</td>
    </tr>
    <tr>
      <td width="56"><font face="Courier New">(.{2})</font></td>
      <td width="108">wildcard x 2</td>
      <td>matches and captures the next 2 characters, i.e. 5-6</td>
    </tr>
    <tr>
      <td width="56"><font face="Courier New">(.{2})</font></td>
      <td width="108">wildcard x 2</td>
      <td>matches and captures the next 2 characters, i.e. 7-8</td>
    </tr>
    <tr>
      <td width="56">\1</td>
      <td width="108">capture group 1</td>
      <td>represents characters 3-4 in the target string, and tries to match 
      them starting at character 9 (i.e. 9-10)</td>
    </tr>
    <tr>
      <td width="56">\2</td>
      <td width="108">capture group 2</td>
      <td>represents characters 5-6 in the target string, and tries to match 
      them starting at character 11 (i.e. 11-12)</td>
    </tr>
    <tr>
      <td width="56">\3</td>
      <td width="108">capture group 3</td>
      <td>represents characters 7-8 in the target string, and tries to match 
      them starting at character 11 (i.e. 11-12)</td>
    </tr>
  </table>
</blockquote>
<p>This expression matches the file named <font face="Courier New"><b>
ab12ed4f12ed4f</b></font>, but not the file named <font face="Courier New"><b>
ab12ed4f12ed4g</b></font> (the 2 character repeating patterns are not satisfied 
at the last character).</p>
<p>&nbsp;</p>
<h3><a name="concat"></a>Concatenation</h3>
<p>Regular expression elements, with or without repetition counts, can be 
concatenated to form longer regular expressions, simply by writing the 
individual elements concurrently.&nbsp; The resulting expression is a result of 
applying the individual elements, in sequence left to right, in order to 
determine a match.</p>
<blockquote>
  <p><b>Example:</b> the expression&nbsp;&nbsp;&nbsp; <font face="Courier New">
  a+(b|c){2,}\.doc</font>&nbsp;&nbsp;&nbsp; is a result of concatenating</p>
</blockquote>
<table border="0" cellpadding="2" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111">
  <tr>
    <td width="201">&nbsp;</td>
    <td width="19">&#9679;</td>
    <td width="86"><font face="Courier New">a+</font></td>
    <td>match one or more &quot;a&quot;s, then</td>
  </tr>
  <tr>
    <td width="201">&nbsp;</td>
    <td width="19">&#9679;</td>
    <td width="86"><font face="Courier New">(b|c){2,}</font></td>
    <td>match &quot;b&quot; or &quot;c&quot;, 2 or more times, then</td>
  </tr>
  <tr>
    <td width="201">&nbsp;</td>
    <td width="19">&#9679;</td>
    <td width="86"><font face="Courier New">\.</font></td>
    <td>match the &quot;.&quot; (dot) character (part of the file extension), then</td>
  </tr>
  <tr>
    <td width="201">&nbsp;</td>
    <td width="19">&#9679;</td>
    <td width="86"><font face="Courier New">doc</font></td>
    <td>match &quot;doc&quot;</td>
  </tr>
</table>
<blockquote>
  <p>This expression would match file names of <b>acc.doc</b> and <b>abbb.doc</b>, 
  but would not match <b>acc.txt</b> or <b>ac.doc</b>.</p>
</blockquote>
<p><a title="Top of page" href="#top" style="background-color:transparent">
<img border="0" src="../images/common/arrow_top.gif" width="23" height="23"></a></p>

</body>

</html>
